var tipuesearch = {"pages": [{'title': 'About', 'text': 'https://github.com/mdecycu/cmsite \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_（程式語言） \n \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) Variables (Python Keywords) Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) Numbers (整數 int(), 浮點數 float()) Strings (字串) print (Python 內建函式, print() 函式) Python control flow tools \n for if range open read lists tuples dictionaries functions try ... except break pass classes 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (practice_html.txt 動態頁面超文件). \n practice_html.txt 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 class 後, 在範例導入時透過 instance 引用. \n <!-- 啟動 Brython --> \n<腳本> \n視窗.onload=函數(){ \nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']}); \n} \n</腳本> \n 從1累加到100： \n 1 加到 100 \n 將 iterable 與 iterator 相關說明 ，利用 Brython 與 Ace Editor 整理在此頁面。 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 檔案名稱： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑步   輸出   明確輸出區 清晰的繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從1累加到100第2部分： \n 1 加到 100 cango_三_齒輪 BS蛇 人工智慧俄羅斯方塊 旋轉塊 \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 檔案名稱： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑步   輸出   明確輸出區 清晰的繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n \n \n \n', 'tags': '', 'url': 'Brython.html'}, {'title': '任務一(Fusion360)', 'text': '', 'tags': '', 'url': '任務一(Fusion360).html'}, {'title': '零件-1', 'text': '\n     \n', 'tags': '', 'url': '零件-1.html'}, {'title': '組合圖', 'text': '\n \n', 'tags': '', 'url': '組合圖.html'}, {'title': '作動-1', 'text': '\n \n', 'tags': '', 'url': '作動-1.html'}, {'title': '雲端-1', 'text': '檔案位置 \n', 'tags': '', 'url': '雲端-1.html'}, {'title': '軌道永動機(Fusion360)', 'text': '', 'tags': '', 'url': '軌道永動機(Fusion360).html'}, {'title': '零件-2', 'text': '\n \n \n', 'tags': '', 'url': '零件-2.html'}, {'title': '組合', 'text': '\n', 'tags': '', 'url': '組合.html'}, {'title': '作動-2', 'text': '\n \n', 'tags': '', 'url': '作動-2.html'}, {'title': '雲端-2', 'text': '檔案位置 \n', 'tags': '', 'url': '雲端-2.html'}, {'title': 'w4~w5', 'text': '', 'tags': '', 'url': 'w4~w5.html'}, {'title': 'siemens', 'text': '西門子 (Siemens) 是德國有名的機電資軟硬體整合公司, 目前旗下的電腦輔助機械設計套件包括中階套件 \xa0 Solid Edge ( community 版 Siemens Solid Edge \xa0-\xa0 可攜版下載 \xa0(無須上網即可開啟, 但因為啟動之前必須執行 Solid Edge 所需之 Registry import, 因此可攜版比較建議在有還原卡或虛擬主機中使用, for @nfu users only), 與高階套件 NX. \n 下載 \xa0 NX2027.3401_lite_cad2022.7z \xa0 (需要下載密碼, 執行時必須連網至機械設計工程系的認證伺服器才能開啟) \n \n', 'tags': '', 'url': 'siemens.html'}, {'title': '網站評分', 'text': '自評分數:60 \n 大部分能完成，尚未做到的會再努力學及練習。 \n A: 是否按照進度明確標示倉儲的改版歷程--不完全照順序，但有完成 \n B: 是否根據 \xa0 IPv4 與 IPv6 \xa0 網路環境設定進行作法討論--有時有 \n C: 是否就 \xa0 Replit、s.cycu.org 與 localhost \xa0 情境下對個人與分組倉儲進行設定操作--是 \n D: 是否就所分配的 \xa0 CAD 套件 從安裝設定到繪圖提供內容參考--是 \n E: 是否使用所分配的 CAD 套件完成 專案一零組件繪圖 , 並提供零組件下載--是 \n F: 是否將自行繪製的專案一零組件 轉入 CoppeliaSim--有嘗試 \n G: 是否利用 \xa0 ZMQ Remote API Python \xa0 對專案一轉入的零組件設定感測器, 並進行 鋼球永動模擬--有嘗試 \n H: 是否實際操作 \xa0 Triangle 軌道系統 的鋼球永動模擬--尚未 \n I: 是否完成 W15 的平面雙 U 迴路上的 鋼球永動系統繪圖、轉檔與系統模擬--尚未 \n J: 是否使用所分配的 CAD 套件完成 專案二 1D 平台零組件繪圖 , 並提供零組件下載--是 \n K: 是否利用 \xa0 ZMQ Remote API Python \xa0 對專案二轉入的零組件設定感測器, 並進行鋼球永動模擬--尚未 \n L: 是否針對專案二的 1D 平台鋼球平衡系統所需的 \xa0 PID 控制理論 進行資料收集與 ChatGPT 對答-- \n 尚未， 影片已看完，需多加複習 \n  editor2 結束  \n \n \n', 'tags': '', 'url': '網站評分.html'}]};